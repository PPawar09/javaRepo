https://www.journaldev.com/2433/spring-mvc-tutorial

********** Topic with example *****************

1) DI, IOC and AOP

// https://www.springboottutorial.com/creating-rest-service-with-spring-boot
2) RestFull Student Service (When Spring load the service it will ask for default username is: user and the default password will be printed in the console at the time when your Spring Boot project is starting.)
   to test from post man try basic auth and enter above credential.

		-  Run RestStudentServiceMain
		-  test endpoint url http://localhost:8080/students/Student1/courses/Course1
		-                    http://localhost:8080/students/Student2/courses
		- 					 http://localhost:8080/actuator/health
		- 					 http://localhost:8080/welcome
		- 					 http://localhost:8080/dynamic-configuration
		
3) Actuator is important tool in Spring Boot.


*********** Topic In Path **********************

https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html
1) What Is an Actuator?

	Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, 
	the health endpoint provides basic application health information.

	Actuator brings production-ready features to our application.
	Monitoring our app, gathering metrics, understanding traffic, or the state of our database become trivial with this dependency.
	
	The main benefit of this library is that we can get production-grade tools without having to actually implement these features ourselves.
	Actuator is mainly used to expose operational information about the running application — health, metrics, info, dump, env, etc. It uses HTTP endpoints or 
	JMX beans to enable us to interact with it.
	
	- http://localhost:8080/actuator        : here you will various endpoint on actuator.
	- http://localhost:8080/actuator/health
	- http://localhost:8080/actuator/info


*********** Spring Annotation Document *********

1)  @Component annotation is added to the class, so that when Spring framework will scan for the components, this class will be treated as component. 
	@Component annotation can be applied only to the class and it’s retention policy is Runtime. If you are not not familiar with Annotations retention policy.
	
2)  @Autowired annotation is used to let Spring know that autowiring is required. This can be applied to field, constructor and methods. 
    This annotation allows us to implement constructor-based, field-based or method-based dependency injection in our components.
   
3)  @Configuration annotation is used to let Spring know that it’s a Configuration class.We use @Configuration so that Spring creates a Spring bean in the application context.

4)  @ComponentScan annotation is used with @Configuration annotation to specify the packages to look for Component classes.

5)  @Bean annotation is used to let Spring framework know that this method should be used to get the bean implementation to inject in Component classes.

6)  @Component vs @Repository and @Service in Spring : We can use @Component across the application to mark the beans as Spring's managed components. 
	Spring will only pick up and register beans with @Component, and doesn't look for @Service and @Repository in general.
	They are registered in ApplicationContext because they are annotated with @Component
	@Service and @Repository are special cases of @Component. They are technically the same, but we use them for the different purposes.
	@Service annotates classes at the service layer.@Service to indicate that they're holding the business logic. Besides being used in the service layer, 
	there isn't any other special use for this annotation.
	@Repository annotates classes at the persistence layer, which will act as a database repository.
	
7) @Controller is a stereotype for the presentation layer (spring-MVC).The @Controller is a common annotation that is used to mark a class as Spring MVC Controller 
	while @RestController is a special controller used in RESTFul web services and the equivalent of @Controller + @ResponseBody.

8) @RestController is a specialized version of the controller. It includes the @Controller and @ResponseBody annotations,
   and as a result, simplifies the controller implementation and it avoids the need of prefixing every method with @ResponseBody.
   
9) @ConfigurationProperties annotation allows us to map the resource files such as properties or YAML files to Java Bean object.

10) @RequestBody and @ResponseBody annotations are used to convert the body of the HTTP request and response with java class objects. 
    Both these annotations will use registered HTTP message converters in the process of converting/mapping HTTP request/response body with java objects.

