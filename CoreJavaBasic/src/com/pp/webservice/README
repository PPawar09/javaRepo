1) OAuth is an open standard for authorization, that lets clients obtain access to protected server 
   resources on behalf of a resource owner. The resource owner could be a different client or the end user. 
   OAuth also helps end users authorize third-party access to their server resources without having to share 
   their credentials, such as user names and passwords. 
   There are series of articles adheres to the OAuth 2.0 authorization framework outlined in RFC6749. 
   The complete OAuth 2.0 authorization framework as outlined under RFC 6749 can be found at the Internet 
   Engineering Task Force website.
   
   There are several Implementation to build request for Oauth complaince REST API Services.
   
   a) Twitter has lot of REST service using Oauth.
   		https://apps.twitter.com/app/13537295
   		https://www.javacodegeeks.com/2012/03/twitter-api-on-your-java-application.html
   
   b) Scribe Jar to build request
   	  https://github.com/LiveEngage-Examples/LiveEngage-Engagement-History-API/blob/master/Java-EHAPI-Example/src/main/java/EngagementHistory.java
   	  https://github.com/tomekc/simple-oauth2-example/blob/master/java-client/src/main/java/tomek/MyApiService.java
   		
   c) IBM Library : https://www.ibm.com/developerworks/library/se-oauthjavapt2/
   
   d) Google API: http://blog.takipi.com/tutorial-how-to-implement-java-oauth-2-0-to-sign-in-with-github-and-google/
   
 2) What is a good approach to verify XML response from RESTful service in Java?

	Approach to handle JSON and xml Response is below link
    http://stackoverflow.com/questions/34432343/what-is-a-good-approach-to-verify-xml-response-from-restful-service-in-java
    
 3) 
 
 	> RESTful services (Mostly web integration, mobile phone apps)

		- Integration over web will be easy with the REST. Popularly used with the AJAX calls.
		- Not verbose as SOAP services so need less bandwidth hence good to use for the mobile apps.
		- Web services are completely stateless so only for stateless services.

	> JAX-WS and JAX-RPC are SOAP based services. (Enterprise web services)

		- JAX-WS Java EE later versions support this and standards still evolving. - SOAP based services not preferred for mobile app 
		  communication because of heavy payload compare to rest. - More suitable for the enterprise web services where you need interoperability, 
		  transactions, message delivery and reliability.
		  
 4) JAX-RPC versus JAX-WS
 
 		- https://www.ibm.com/developerworks/library/ws-tip-jaxwsrpc/index.html
 		
 		- JAX-WS is supposed to perform better in general than JAX-RPC, see the already mentioned article.
		- JAX-RPC is a dead standard that has been pruned in Java EE 6 (and might thus be removed from future versions). 
		  Reason for Pruning: JAX-RPC was an early attempt at modeling SOAP web services as RPC calls. Web services have since grown out of being an RPC model. 
		  The much more robust, feature-rich and popular JAX-WS API effectively supercedes JAX-RPC 
    
   
   
 