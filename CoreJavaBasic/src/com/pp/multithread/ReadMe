1>	A thread in Java begins as an instance of java.lang.Thread. You'll find methods
	in the Thread class for managing threads including creating, starting, and pausing
	them. For the exam, you'll need to know, at a minimum, the following methods:
	start()
	yield()
	sleep()
	run()
	
	Any Thread start it logic from run.job always starts from a
	
	run() method as follows:
	public void run() {
	// your job code goes here
	}
	
	So where does the run() method go? In one of the two classes you can use to define your thread job.
    You can define and instantiate a thread in one of two ways:
    
    	> Extend the java.lang.Thread class.
    	> Implement the Runnable interface.
    	
	You need to know about both for the exam, although in the real world you're
	much more likely to implement Runnable than extend Thread. Extending the
	Thread class is the easiest, but it's usually not a good OO practice. Why? Because
	subclassing should be reserved for specialized versions of more general superclasses.
	So the only time it really makes sense (from an OO perspective) to extend Thread is
	when you have a more specialized version of a Thread class. In other words, because
	you have more specialized thread-specific behavior. Chances are, though, that the
	thread work you want is really just a job to be done by a thread. In that case, you
	should design a class that implements the Runnable interface, which also leaves your
	class free to extend from some other class.
	
	Refer to code for how to create Thread

>2  Very Imp : here’s nothing special about the run() method as far as Java is
	concerned. Like main(), it just happens to be the name (and signature) of the method
	that the new thread knows to invoke. So if you see code that calls the run() method on
	a Runnable (or even on a Thread instance), that’s perfectly legal. But it doesn’t mean the
	run() method will run in a separate thread! Calling a run() method directly just means
	you’re invoking a method from whatever thread is currently executing, and the run()
	method goes onto the current call stack rather than at the beginning of a new call stack.
	The following code does not start a new thread of execution:
	Runnable r = new Runnable();
	r.run(); // Legal, but does not start a separate thread

>3  Thread States 
	A thread can be only in one of five states (see Figure 9-2):
	
	New  - > This is the state the thread is in after the Thread instance has been
			created, but the start() method has not been invoked on the thread. It is
			a live Thread object, but not yet a thread of execution. At this point, the
			thread is considered not alive.
			
	Runnable - > This is the state a thread is in when it's eligible to run, but the
				 scheduler has not selected it to be the running thread. A thread first enters
                 the runnable state when the start() method is invoked, but a thread can
                 also return to the runnable state after either running or coming back from a
                 blocked, waiting, or sleeping state. When the thread is in the runnable state,
                 it is considered alive.
    Running  ->  This is it. The "big time." Where the action is. This is the state a
                 thread is in when the thread scheduler selects it (from the runnable pool) to
                 be the currently executing process. A thread can transition out of a running
                 state for several reasons, including because "the thread scheduler felt like it."
                 We'll look at those other reasons shortly. Note that in Figure 9-2, there are
                 several ways to get to the runnable state, but only one way to get to the running
                 state: the scheduler chooses a thread from the runnable pool.
                 
    Waiting/blocked/sleeping -> This is the state a thread is in when it's
				eligible to run. Okay, so this is really three states combined into one,
				but they all have one thing in common: the thread is still alive, but is
				currently not eligible to run. In other words, it is not runnable, but it might
				return to a runnable state later if a particular event occurs. A thread may be
				blocked waiting for a resource (like I/O or an object's lock), in which case the
				event that sends it back to runnable is the availability of the resource—for
				example, if data comes in through the input stream the thread code is reading
				from, or if the object's lock suddenly becomes available.
	
	Dead ->     A thread is considered dead when its run() method completes.
	
> 4   Preventing Thread Execution

				Sleeping  : The sleep() method is a static method of class Thread. You use it in your code
				to "slow a thread down" by forcing it to go into a sleep mode before coming back to
                runnable (where it still has to beg to be the currently running thread).
                
                
> 5  			Setting a Thread's Priority A thread gets a default priority that is the priority
				of the thread of execution that creates it. For example, in the code

				FooRunnable r = new FooRunnable();
				Thread t = new Thread(r);
				t.setPriority(8);
				t.start();
				Priorities are set using a positive integer, usually between 1 and 10, and the JVM
				will never change a thread's priority. However, the values 1 through 10 are not
				guaranteed. Some JVM's might not recognize ten distinct values. Such a JVM might
				merge values from 1 to 10 down to maybe values from 1 to 5, so if you have, say, ten
				threads each with a different priority, and the current application is running in a
				JVM that allocates a range of only five priorities, then two or more threads might be
				mapped to one priority.
				Although the default priority is 5, the Thread class has the three following
				
				Thread.MIN_PRIORITY (1)
				Thread.NORM_PRIORITY (5)
				Thread.MAX_PRIORITY (10)
				
				
>   Synchronize code
				constants (static final variables) that define the range of thread priorities:
 				Waiting
 				Blocked because it needs an object's lock


	
	